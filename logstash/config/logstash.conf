input {
  gelf {
      type => "container-log"
      port => 12201
  }
  beats {
      type => "magento-log"
      port => 5044
  }
}

filter {
  # Ignore generic Magento logs
  if [type] == "container-log" {
    grok {
      match => {
        "message" => '%{IPORHOST:remote_ip} - %{DATA:user_name} \[%{HTTPDATE:time}\] "%{WORD:request_action} %{DATA:request} HTTP/%{NUMBER:http_version}" %{NUMBER:response} %{NUMBER:bytes} "%{DATA:referrer}" "%{DATA:agent}"'
      }
    }
     if [message] == "Ran jobs by schedule." {
       drop { }
     }
     if [message] == "update-cron: Please check var/log/update.log for execution summary." {
       drop { }
     }
  }
  if [tag] == "phpfpm" {
    if [message] =~ "index.php" {
      drop { }
    } 
  }

  if [tag] == "nginx" {
    grok {
      match => {
        #"message" => '%{IPORHOST:remote_ip} - %{DATA:user_name} \[%{HTTPDATE:time}\] "%{WORD:request_action} %{DATA:request} HTTP/%{NUMBER:http_version}" %{NUMBER:response} %{NUMBER:bytes} "%{DATA:referrer}" "%{DATA:agent}"'
         "message" => '%{IPORHOST:remote_ip} - %{DATA:user_name} \[%{HTTPDATE:time}\] "%{WORD:request_action} %{DATA:request} HTTP/%{NUMBER:http_version}" %{NUMBER:response} %{NUMBER:bytes} "%{DATA:referrer}" "%{DATA:agent}" "%{NUMBER:connections_per_request}" "%{NUMBER:response_time}" (?:"%{NUMBER:upstream_response_time}"|-)'
      }
    }
    # Drop admin requests
    if [request] =~ "\/admin_"  {
      #drop { }
    }
    date {
      match => [ "time", "dd/MMM/YYYY:HH:mm:ss Z" ]
      locale => en
    }
    # Load Geo IP database
    geoip {
      source => "remote_ip"
      target => "geoip"
      #database => "/etc/logstash/GeoLite2-City.mmdb"
    }
    
    mutate {
      convert => ["upstream_response_time", "float"]
      convert => ["response_time", "float"]
      convert => ["connections_per_request", "integer"]
      convert => ["bytes", "integer"]
    }

    useragent {
      source => "agent"
      target => "user_agent"     
    }

    # Drop spiders
    if [user_agent][device] == "Spider" {
      drop { }
    }

    if [request] =~ "\/customer\/section\/load" {
      drop { }
    }
  } else {
      mutate {
        add_field => {
          "stack_trace" => "%{message}"
        } 
      }
      # Split the original message (multiline) by line break
      ruby {
        code => "event.set('message', event.get('message').split(/\n/))"
      }
      # Grab the first line only and save it back to "message"
      mutate {
        replace => { "message" => "%{[message][0]}" }
      }
      # Parse error message if its a stack trace from exception log (error report messages come in different format than exception lo messages)
      grok {
        match => { "message" => "%{LOGLEVEL:log-level}" }
      }
      if [log-level] == "DEBUG" {
        #drop { }
      }
      if [fields][type] == "system-log" {
        if [log-level] == "INFO" {
          #drop { }
        }
      }
      if [fields][type] == "error-report-log" {
        grok {
          match => { "message" => "%{QS:message_text}" }
        }
        # Add custom field so we can sum the total of user crashes
        mutate {
          add_field => { "user_process_crashed" => 1 }
        }
        mutate {
          convert => ["user_process_crashed", "integer"]
        }
      } 
      else {
        grok {
          match => { "message" => "(?<message_text>(?<=:\s).*?([\s\S].*))" }
        }
        grok {
          match => { "message" => "%{DATESTAMP:timestamp}" }
        }
      }
  }
}

output {
 if [type] == "container-log" {
   elasticsearch {
     hosts => ["elasticsearch:9200"]
     user => "elastic"
     password => "changeme"
     index => "container-log-%{[fields][app_id]}"
     document_type => "nginx"
     template => "/etc/logstash/templates/nginx_template.json"
     template_name => "container-log"
     template_overwrite => true
     manage_template => true
   }
  }
  else {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      user => "elastic"
      password => "changeme"
      index => "magento-log-%{[fields][app_id]}"
      template => "/etc/logstash/templates/magentolog_template.json"
      template_name => "magentolog-*"
      template_overwrite => true
  }
 }
 stdout { codec => rubydebug }
}

